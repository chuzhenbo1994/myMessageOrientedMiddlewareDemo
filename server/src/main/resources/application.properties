##redis
spring.redis.host=127.0.0.1
spring.redis.port=6379
##mysql
spring.datasource.url=jdbc:mysql://localhost:3306/world?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.username=root
spring.datasource.password=123123
#设置jpa自动创建表
spring.jpa.generate-ddl=true
spring.jpa.show-sql=true
#日志打印
logging.level.com.example.server=debug

server.port=10010
#spring.datasource.driver-class-name=com.alibaba.druid.proxy.DruidDriver
# spring.datasource.jpa.hibernate.ddl-auto=update
# spring.datasource.jpa.show-sql=true
#rabbitmq
spring.rabbitmq.virtual-host=/
spring.rabbitmq.host=127.0.0.1
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
mq.env=local
mq.basic.info.queue.name=${mq.env}.middleware.mq.basic.info.queue
mq.basic.info.exchange.name=${mq.env}.middleware.mq.basic.info.exchange
mq.basic.info.routing.key.name=${mq.env}.middleware.mq.basic.info.routing.key
mq.object.info.queue.name=${mq.env}.middleware.mq.object.info.queue
mq.object.info.exchange.name=${mq.env}.middleware.mq.object.info.exchange
mq.object.info.routing.key.name=${mq.env}.middleware.mq.object.info.routing.key
# 广播队列 配置 ，这里不需配置路由
mq.fanout.queue.one.name=${mq.env}.middleware.mq.fanout.one.queue
mq.fanout.queue.two.name=${mq.env}.middleware.mq.fanout.two.queue
mq.fanout.exchange.name=${mq.env}.middleware.mq.fanout.exchange
# 直接传输队列
mq.direct.queue.one.name=${mq.env}.middleware.mq.direct.one.queue
mq.direct.queue.two.name=${mq.env}.middleware.mq.direct.two.queue
mq.direct.exchange.name=${mq.env}.middleware.mq.direct.exchange
# 创建直接诶传输的两条路由
mq.direct.routing.key.one.name=${mq.env}.middleware.mq.direct.routing.key.one
mq.direct.routing.key.two.name=${mq.env}.middleware.mq.direct.routing.key.two
# 通配式
mq.topic.queue.one.name=${mq.env}.middleware.mq.topic.one.queue
mq.topic.queue.two.name=${mq.env}.middleware.mq.topic.two.queue
# 同配置的交换机名称
mq.topic.exchange.name=${mq.env}.middleware.mq.topic.exchange
# 创建通配式传输的两条路由
mq.topic.routing.key.one.name=${mq.env}.middleware.mq.topic.routing.*.one
mq.topic.routing.key.two.name=${mq.env}.middleware.mq.topic.routing.#.two
# 自动确认消息
# 队列
mq.auto.knowledge.queue.name=${mq.env}.middleware.auto.knowledge.queue
#交换机
mq.auto.knowledge.exchange.name=${mq.env}.middleware.auto.knowledge.exchange
# 路由
mq.auto.knowledge.routing.key.name=${mq.env}.middleware.auto.knowledge.routing.key
mq.manual.knowledge.queue.name=${mq.env}.middleware.mq.manual.knowledge.queue
mq.manual.knowledge.exchange.name=${mq.env}.middleware.mq.manual.knowledge.exchange
mq.manual.knowledge.routing.key.name=${mq.env}.middleware.mq.manual.knowledge.routing.key
mq.login.queue.name=${mq.env}.middleware.login.queue
mq.login.exchange.name=${mq.env}.middleware.login.exchange
mq.login.routing.key.name=${mq.env}.middleware.login.routing.key
#死信队列消息模式
#定义死信队列的名称
mq.dead.queue.name=${mq.env}.middleware.dead.queue
#定义死信交换机的名称
mq.dead.exchange.name=${mq.env}.middleware.dead.exchange
#定义死信路由的名称
mq.dead.routing.key.name=${mq.env}.middleware.dead.routing.key
# 定义基本消息模型 中基本交换机
mq.producer.basic.exchange.name=${mq.env}.middleware.producer.basic.exchange
# 定义基本消息模型 中基本路由名称
mq.producer.basic.routing.key.name=${mq.env}.middleware.producer.basic.routing.key
# 定义面向消费者的真正队列的名称
mq.consumer.real.queue.name=${mq.env}.middleware.consumer.real.queue.name
#死信队列消息模式 -- 实战之 订单未支付
#定义死信队列的名称
mq.order.dead.queue.name=${mq.env}.middleware.order.dead.queue
#定义死信交换机的名称
mq.order.dead.exchange.name=${mq.env}.middleware.order.dead.exchange
#定义死信路由的名称
mq.order.dead.routing.key.name=${mq.env}.middleware.order.dead.routing.key
# 定义基本消息模型 中基本交换机
mq.producer.order.exchange.name=${mq.env}.middleware.order.basic.exchange
# 定义基本消息模型 中基本路由名称
mq.producer.order.routing.key.name=${mq.env}.middleware.order.basic.routing.key
# 定义面向消费者的真正队列的名称
mq.consumer.order.real.queue.name=${mq.env}.middleware.consumer.order.real.queue
